
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_NANO_SoC_GHRD(

		//////////// CLOCK //////////
		input               FPGA_CLK1_50,
		input               FPGA_CLK2_50,
		input               FPGA_CLK3_50,
//		//////////// HDMI //////////
//		inout 		          		HDMI_I2C_SCL,
//		inout 		          		HDMI_I2C_SDA,
//		inout 		          		HDMI_I2S,
//		inout 		          		HDMI_LRCLK,
//		inout 		          		HDMI_MCLK,
//		inout 		          		HDMI_SCLK,
//		output		          		HDMI_TX_CLK,
//		output		          		HDMI_TX_DE,
//		output		    [23:0]		HDMI_TX_D,
//		output		          		HDMI_TX_HS,
//		input 		          		HDMI_TX_INT,
//		output		          		HDMI_TX_VS,

		//////////// HPS //////////
		inout               HPS_CONV_USB_N,
		output   [14: 0]    HPS_DDR3_ADDR,
		output   [ 2: 0]    HPS_DDR3_BA,
		output              HPS_DDR3_CAS_N,
		output              HPS_DDR3_CK_N,
		output              HPS_DDR3_CK_P,
		output              HPS_DDR3_CKE,
		output              HPS_DDR3_CS_N,
		output   [ 3: 0]    HPS_DDR3_DM,
		inout    [31: 0]    HPS_DDR3_DQ,
		inout    [ 3: 0]    HPS_DDR3_DQS_N,
		inout    [ 3: 0]    HPS_DDR3_DQS_P,
		output              HPS_DDR3_ODT,
		output              HPS_DDR3_RAS_N,
		output              HPS_DDR3_RESET_N,
		input               HPS_DDR3_RZQ,
		output              HPS_DDR3_WE_N,
		output              HPS_ENET_GTX_CLK,
		inout               HPS_ENET_INT_N,
		output              HPS_ENET_MDC,
		inout               HPS_ENET_MDIO,
		input               HPS_ENET_RX_CLK,
		input    [ 3: 0]    HPS_ENET_RX_DATA,
		input               HPS_ENET_RX_DV,
		output   [ 3: 0]    HPS_ENET_TX_DATA,
		output              HPS_ENET_TX_EN,
		inout               HPS_GSENSOR_INT,
		inout               HPS_I2C0_SCLK,
		inout               HPS_I2C0_SDAT,
		inout               HPS_I2C1_SCLK,
		inout               HPS_I2C1_SDAT,
		inout               HPS_KEY,
		inout               HPS_LED,
		inout               HPS_LTC_GPIO,
		output              HPS_SD_CLK,
		inout               HPS_SD_CMD,
		inout    [ 3: 0]    HPS_SD_DATA,
		output              HPS_SPIM_CLK,
		input               HPS_SPIM_MISO,
		output              HPS_SPIM_MOSI,
		inout               HPS_SPIM_SS,
		input               HPS_UART_RX,
		output              HPS_UART_TX,
		input               HPS_USB_CLKOUT,
		inout    [ 7: 0]    HPS_USB_DATA,
		input               HPS_USB_DIR,
		input               HPS_USB_NXT,
		output              HPS_USB_STP,

		//////////// KEY //////////
		input    [ 1: 0]    KEY,

		//////////// LED //////////
		output   [ 7: 0]    LED,

		//////////// SW //////////
		input    [ 3: 0]    SW,
		//////////// GPIO_0, GPIO connect to D8M-GPIO //////////
		inout 		          		CAMERA_I2C_SCL,
		inout 		          		CAMERA_I2C_SDA,
		output		          		CAMERA_PWDN_n,
		output		          		MIPI_CS_n,
		inout 		          		MIPI_I2C_SCL,
		inout 		          		MIPI_I2C_SDA,
		output		          		MIPI_MCLK,
		input 		          		MIPI_PIXEL_CLK,
		input 		     [9:0]		MIPI_PIXEL_D,
		input 		          		MIPI_PIXEL_HS,
		input 		          		MIPI_PIXEL_VS,
		output		          		MIPI_REFCLK,
		output		          		MIPI_RESET_n,

		//////////// GPIO_1, GPIO connect to GPIO Default //////////
		inout 		    [35:0]		GPIO1GPIO	 
	 
);

parameter VIDEO_HEIGHT =16'd480 ; 
parameter VIDEO_WIDTH  =16'd640 ; 

//=======================================================
//  REG/WIRE declarations
//=======================================================

wire disp_hs;
wire disp_vs;
wire disp_de;
wire [7:0] disp_r;
wire [7:0] disp_g;
wire [7:0] disp_b;

wire  RESET_N;
wire  RESET_N_DELAY  ; 

wire  I2C_RELEASE;
wire  VCM_RELAESE;
//wire  HDMI_CLK;
wire  READY;

wire  D8M_CK_HZ;
wire  D8M_CK_HZ2;
wire  D8M_CK_HZ3;

wire  AUTO_FOC ;

//=======================================================
//  Structural coding
//=======================================================
//assign HDMI_TX_DE  = disp_de;
//assign HDMI_TX_CLK = ~HDMI_CLK; // sdc -invert
//assign HDMI_TX_HS  = disp_hs;
//assign HDMI_TX_VS  = disp_vs;

//assign HDMI_TX_D   = {disp_r, disp_g, disp_b};

assign CAMERA_PWDN_n  = RESET_N; 
assign MIPI_CS_n      = 0 ; 
assign MIPI_RESET_n   = RESET_N; 

//<------------------------------------------
assign I2C_RELEASE = CAMERA_MIPI_RELAESE & MIPI_BRIDGE_RELEASE; 
assign CAMERA_I2C_SCL = ( I2C_RELEASE  )?  CAMERA_I2C_SCL_AF  : CAMERA_I2C_SCL_MIPI ;   
 
wire CAMERA_I2C_SCL_MIPI ; 
wire CAMERA_I2C_SCL_AF;

wire CAMERA_MIPI_RELAESE , MIPI_BRIDGE_RELEASE ; 

////---ALL RESET ---- 
//RESET_DELAY  d5(
//           .RESET_N      ( RESET_N ) ,
//           .CLK          ( FPGA_CLK2_50 ) , 
//           .READY        ( RESET_N_DELAY)  
//);  
 //------ MIPI BRIGE & CAMERA SETTING  --   
//MIPI_BRIDGE_CAMERA_Config    cfin(
//          .RESET_N           ( RESET_N_DELAY ), 
//          .CLK_50            ( FPGA_CLK2_50 ), 
//          .MIPI_I2C_SCL      ( MIPI_I2C_SCL ), 
//          .MIPI_I2C_SDA      ( MIPI_I2C_SDA ), 
//         .MIPI_I2C_RELEASE  ( MIPI_BRIDGE_RELEASE ),  
//          .CAMERA_I2C_SCL    ( CAMERA_I2C_SCL_MIPI ),
//          .CAMERA_I2C_SDA    ( CAMERA_I2C_SDA ),
//          .CAMERA_I2C_RELAESE( CAMERA_MIPI_RELAESE ),
//			 .VCM_RELAESE       ( VCM_RELAESE )
// );


////-- SYSTEM RESET 
//RESET_DELAY  del  (
// .RESET_N (KEY[0] ) ,
// .CLK     (FPGA_CLK3_50) , 
// .READY   ( RESET_N)  
//);


RESET_DELAY  dl(
           .RESET_N      ( KEY[0] ) ,
           .CLK          ( FPGA_CLK1_50) , 
           .READY0       ( RESET_N),
			  .READY1       ( RESET_N_DELAY ) 
); 


////------AUTO FOCUS ENABLE  --
//AUTO_FOCUS_ON  u9( 
//          .CLK_50      ( FPGA_CLK3_50 ), 
//          .I2C_RELEASE ( I2C_RELEASE ), 
//          .AUTO_FOC    ( AUTO_FOC )
//               ) ; 
//
//
////------AUTO FOCUS ADJ  --
//FOCUS_ADJ adl(
//          .CLK_50        ( FPGA_CLK3_50) , 
//          .RESET_N       ( I2C_RELEASE ), 
//          .RESET_SUB_N   ( I2C_RELEASE ), 
//          .AUTO_FOC      ( KEY[1] & AUTO_FOC ),
//          .SW_Y          ( 0 ),
//          .SW_H_FREQ     ( 0 ),   
//          .SW_FUC_LINE   ( SW[3] ),   
//          .SW_FUC_ALL_CEN( SW[3] ), 
//		
//
//			 .VIDEO_DE      (disp_de) ,
//			
//          .VIDEO_HS      ( disp_hs),
//          .VIDEO_VS      ( disp_vs),
//          .VIDEO_CLK     ( HDMI_CLK),
//          .iR            (disp_r),
//          .iG            (disp_g),
//          .iB            (disp_b),
//			 
//	       .oR            (HDMI_TX_D[23:16] ), 
//       	 .oG            (HDMI_TX_D[15:8]), 
//	       .oB            (HDMI_TX_D[7:0]), 
//	
//          .READY         ( READY),
//          .SCL           ( CAMERA_I2C_SCL_AF ), 
//          .SDA           ( CAMERA_I2C_SDA )
//   
//); 


//HDMI I2C
//I2C_HDMI_Config u_I2C_HDMI_Config (
//	.iCLK(FPGA_CLK2_50),
//	.iRST_N(KEY[0]),
//	.I2C_SCLK(HDMI_I2C_SCL),
//	.I2C_SDAT(HDMI_I2C_SDA),
//	.HDMI_TX_INT(HDMI_TX_INT)
//	);

//=======================================================
//  REG/WIRE declarations
//=======================================================
wire hps_fpga_reset_n;
wire     [1: 0]     fpga_debounced_buttons;
wire     [6: 0]     fpga_led_internal;
wire     [2: 0]     hps_reset_req;
wire                hps_cold_reset;
wire                hps_warm_reset;
wire                hps_debug_reset;
wire     [27: 0]    stm_hw_events;
wire                fpga_clk_50;

// connection of internal logics
assign LED[7: 1] = fpga_led_internal;
assign fpga_clk_50= FPGA_CLK1_50;
assign stm_hw_events = {{15{1'b0}}, SW, fpga_led_internal, fpga_debounced_buttons};
///////////////////////////////////////
reg         MIPI_PIXEL_VS_d;
reg         MIPI_PIXEL_HS_d;
reg   [9:0] MIPI_PIXEL_D_d;


always @ (posedge MIPI_PIXEL_CLK) begin
   MIPI_PIXEL_VS_d <= MIPI_PIXEL_VS;
   MIPI_PIXEL_HS_d <= MIPI_PIXEL_HS;
   MIPI_PIXEL_D_d  <= MIPI_PIXEL_D;
end


//=======================================================
//  Structural coding
//=======================================================
soc_system u0(
               //Clock&Reset
               //.clk_clk(FPGA_CLK1_50),                                      //                            clk.clk
              // .reset_reset_n(hps_fpga_reset_n),                            //                          reset.reset_n
				  
					.clk_clk                               (FPGA_CLK3_50),                               //                            clk.clk

					.reset_reset_n                         (1'b1),         
					
					.clk_vga_clk                            (disp_clk),                                //                        clk_vga.clk					
					//.clk_hps_ref_clk                        (FPGA_CLK1_50),                        //                clk_hps_ref_clk.clk
					//.clk_hdmi_ref_clk                       (),                       //               clk_hdmi_ref_clk.clk


               //HPS ddr3
               .memory_mem_a(HPS_DDR3_ADDR),                                //                         memory.mem_a
               .memory_mem_ba(HPS_DDR3_BA),                                 //                               .mem_ba
               .memory_mem_ck(HPS_DDR3_CK_P),                               //                               .mem_ck
               .memory_mem_ck_n(HPS_DDR3_CK_N),                             //                               .mem_ck_n
               .memory_mem_cke(HPS_DDR3_CKE),                               //                               .mem_cke
               .memory_mem_cs_n(HPS_DDR3_CS_N),                             //                               .mem_cs_n
               .memory_mem_ras_n(HPS_DDR3_RAS_N),                           //                               .mem_ras_n
               .memory_mem_cas_n(HPS_DDR3_CAS_N),                           //                               .mem_cas_n
               .memory_mem_we_n(HPS_DDR3_WE_N),                             //                               .mem_we_n
               .memory_mem_reset_n(HPS_DDR3_RESET_N),                       //                               .mem_reset_n
               .memory_mem_dq(HPS_DDR3_DQ),                                 //                               .mem_dq
               .memory_mem_dqs(HPS_DDR3_DQS_P),                             //                               .mem_dqs
               .memory_mem_dqs_n(HPS_DDR3_DQS_N),                           //                               .mem_dqs_n
               .memory_mem_odt(HPS_DDR3_ODT),                               //                               .mem_odt
               .memory_mem_dm(HPS_DDR3_DM),                                 //                               .mem_dm
               .memory_oct_rzqin(HPS_DDR3_RZQ),                             //                               .oct_rzqin
               //HPS ethernet
               .hps_0_hps_io_hps_io_emac1_inst_TX_CLK(HPS_ENET_GTX_CLK),    //                   hps_0_hps_io.hps_io_emac1_inst_TX_CLK
               .hps_0_hps_io_hps_io_emac1_inst_TXD0(HPS_ENET_TX_DATA[0]),   //                               .hps_io_emac1_inst_TXD0
               .hps_0_hps_io_hps_io_emac1_inst_TXD1(HPS_ENET_TX_DATA[1]),   //                               .hps_io_emac1_inst_TXD1
               .hps_0_hps_io_hps_io_emac1_inst_TXD2(HPS_ENET_TX_DATA[2]),   //                               .hps_io_emac1_inst_TXD2
               .hps_0_hps_io_hps_io_emac1_inst_TXD3(HPS_ENET_TX_DATA[3]),   //                               .hps_io_emac1_inst_TXD3
               .hps_0_hps_io_hps_io_emac1_inst_RXD0(HPS_ENET_RX_DATA[0]),   //                               .hps_io_emac1_inst_RXD0
               .hps_0_hps_io_hps_io_emac1_inst_MDIO(HPS_ENET_MDIO),         //                               .hps_io_emac1_inst_MDIO
               .hps_0_hps_io_hps_io_emac1_inst_MDC(HPS_ENET_MDC),           //                               .hps_io_emac1_inst_MDC
               .hps_0_hps_io_hps_io_emac1_inst_RX_CTL(HPS_ENET_RX_DV),      //                               .hps_io_emac1_inst_RX_CTL
               .hps_0_hps_io_hps_io_emac1_inst_TX_CTL(HPS_ENET_TX_EN),      //                               .hps_io_emac1_inst_TX_CTL
               .hps_0_hps_io_hps_io_emac1_inst_RX_CLK(HPS_ENET_RX_CLK),     //                               .hps_io_emac1_inst_RX_CLK
               .hps_0_hps_io_hps_io_emac1_inst_RXD1(HPS_ENET_RX_DATA[1]),   //                               .hps_io_emac1_inst_RXD1
               .hps_0_hps_io_hps_io_emac1_inst_RXD2(HPS_ENET_RX_DATA[2]),   //                               .hps_io_emac1_inst_RXD2
               .hps_0_hps_io_hps_io_emac1_inst_RXD3(HPS_ENET_RX_DATA[3]),   //                               .hps_io_emac1_inst_RXD3
               //HPS SD card
               .hps_0_hps_io_hps_io_sdio_inst_CMD(HPS_SD_CMD),              //                               .hps_io_sdio_inst_CMD
               .hps_0_hps_io_hps_io_sdio_inst_D0(HPS_SD_DATA[0]),           //                               .hps_io_sdio_inst_D0
               .hps_0_hps_io_hps_io_sdio_inst_D1(HPS_SD_DATA[1]),           //                               .hps_io_sdio_inst_D1
               .hps_0_hps_io_hps_io_sdio_inst_CLK(HPS_SD_CLK),              //                               .hps_io_sdio_inst_CLK
               .hps_0_hps_io_hps_io_sdio_inst_D2(HPS_SD_DATA[2]),           //                               .hps_io_sdio_inst_D2
               .hps_0_hps_io_hps_io_sdio_inst_D3(HPS_SD_DATA[3]),           //                               .hps_io_sdio_inst_D3
               //HPS USB
               .hps_0_hps_io_hps_io_usb1_inst_D0(HPS_USB_DATA[0]),          //                               .hps_io_usb1_inst_D0
               .hps_0_hps_io_hps_io_usb1_inst_D1(HPS_USB_DATA[1]),          //                               .hps_io_usb1_inst_D1
               .hps_0_hps_io_hps_io_usb1_inst_D2(HPS_USB_DATA[2]),          //                               .hps_io_usb1_inst_D2
               .hps_0_hps_io_hps_io_usb1_inst_D3(HPS_USB_DATA[3]),          //                               .hps_io_usb1_inst_D3
               .hps_0_hps_io_hps_io_usb1_inst_D4(HPS_USB_DATA[4]),          //                               .hps_io_usb1_inst_D4
               .hps_0_hps_io_hps_io_usb1_inst_D5(HPS_USB_DATA[5]),          //                               .hps_io_usb1_inst_D5
               .hps_0_hps_io_hps_io_usb1_inst_D6(HPS_USB_DATA[6]),          //                               .hps_io_usb1_inst_D6
               .hps_0_hps_io_hps_io_usb1_inst_D7(HPS_USB_DATA[7]),          //                               .hps_io_usb1_inst_D7
               .hps_0_hps_io_hps_io_usb1_inst_CLK(HPS_USB_CLKOUT),          //                               .hps_io_usb1_inst_CLK
               .hps_0_hps_io_hps_io_usb1_inst_STP(HPS_USB_STP),             //                               .hps_io_usb1_inst_STP
               .hps_0_hps_io_hps_io_usb1_inst_DIR(HPS_USB_DIR),             //                               .hps_io_usb1_inst_DIR
               .hps_0_hps_io_hps_io_usb1_inst_NXT(HPS_USB_NXT),             //                               .hps_io_usb1_inst_NXT
               //HPS SPI
               .hps_0_hps_io_hps_io_spim1_inst_CLK(HPS_SPIM_CLK),           //                               .hps_io_spim1_inst_CLK
               .hps_0_hps_io_hps_io_spim1_inst_MOSI(HPS_SPIM_MOSI),         //                               .hps_io_spim1_inst_MOSI
               .hps_0_hps_io_hps_io_spim1_inst_MISO(HPS_SPIM_MISO),         //                               .hps_io_spim1_inst_MISO
               .hps_0_hps_io_hps_io_spim1_inst_SS0(HPS_SPIM_SS),            //                               .hps_io_spim1_inst_SS0
               //HPS UART
               .hps_0_hps_io_hps_io_uart0_inst_RX(HPS_UART_RX),             //                               .hps_io_uart0_inst_RX
               .hps_0_hps_io_hps_io_uart0_inst_TX(HPS_UART_TX),             //                               .hps_io_uart0_inst_TX
               //HPS I2C1
               .hps_0_hps_io_hps_io_i2c0_inst_SDA(HPS_I2C0_SDAT),           //                               .hps_io_i2c0_inst_SDA
               .hps_0_hps_io_hps_io_i2c0_inst_SCL(HPS_I2C0_SCLK),           //                               .hps_io_i2c0_inst_SCL
               //HPS I2C2
               .hps_0_hps_io_hps_io_i2c1_inst_SDA(HPS_I2C1_SDAT),           //                               .hps_io_i2c1_inst_SDA
               .hps_0_hps_io_hps_io_i2c1_inst_SCL(HPS_I2C1_SCLK),           //                               .hps_io_i2c1_inst_SCL
               //GPIO
               .hps_0_hps_io_hps_io_gpio_inst_GPIO09(HPS_CONV_USB_N),       //                               .hps_io_gpio_inst_GPIO09
               .hps_0_hps_io_hps_io_gpio_inst_GPIO35(HPS_ENET_INT_N),       //                               .hps_io_gpio_inst_GPIO35
               .hps_0_hps_io_hps_io_gpio_inst_GPIO40(HPS_LTC_GPIO),         //                               .hps_io_gpio_inst_GPIO40
               .hps_0_hps_io_hps_io_gpio_inst_GPIO53(HPS_LED),              //                               .hps_io_gpio_inst_GPIO53
               .hps_0_hps_io_hps_io_gpio_inst_GPIO54(HPS_KEY),              //                               .hps_io_gpio_inst_GPIO54
               .hps_0_hps_io_hps_io_gpio_inst_GPIO61(HPS_GSENSOR_INT),      //                               .hps_io_gpio_inst_GPIO61
               //FPGA Partion
               .led_pio_external_connection_export(fpga_led_internal),      //    led_pio_external_connection.export
               .dipsw_pio_external_connection_export(SW),                   //  dipsw_pio_external_connection.export
               .button_pio_external_connection_export(fpga_debounced_buttons),
                                                                            // button_pio_external_connection.export
               //.hps_0_h2f_reset_reset_n(hps_fpga_reset_n),                  //                hps_0_h2f_reset.reset_n
               .hps_0_f2h_cold_reset_req_reset_n(~hps_cold_reset),          //       hps_0_f2h_cold_reset_req.reset_n
               .hps_0_f2h_debug_reset_req_reset_n(~hps_debug_reset),        //      hps_0_f2h_debug_reset_req.reset_n
               .hps_0_f2h_stm_hw_events_stm_hwevents(stm_hw_events),        //        hps_0_f2h_stm_hw_events.stm_hwevents
               .hps_0_f2h_warm_reset_req_reset_n(~hps_warm_reset),          //       hps_0_f2h_warm_reset_req.reset_n
					//UART
					.uart_0_rxd                            (GPIO1GPIO[12]),                            //                         uart_0.rxd
					.uart_0_txd                            (GPIO1GPIO[13]),                            //                               .txd
					.uart_1_rxd                            (GPIO1GPIO[16]),                            //                         uart_1.rxd
					.uart_1_txd                            (GPIO1GPIO[17]),                             //                               .txd				
					.uart_2_RXD                            (GPIO1GPIO[18]),                            //                         uart_2.RXD
					.uart_2_TXD                            (GPIO1GPIO[19]),                            //                               .TXD
					//motor control
					.raise_s_in_export                     (GPIO1GPIO[15]),                     //                     raise_s_in.export
					.falling_s_in_export                   (GPIO1GPIO[14]),                   //                   falling_s_in.export
					.fan2_dir_export                       (GPIO1GPIO[9]),                       //                       fan2_dir.export
					.fan1_dir_export                       (GPIO1GPIO[8]),                       //                       fan1_dir.export
					.body_dir_export                       (GPIO1GPIO[10]),                       //                       body_dir.export
					.picker_dir_export                     (GPIO1GPIO[11]),                     //                     picker_dir.export
					.r_motor_dir_export                    (GPIO1GPIO[7]),                    //                    r_motor_dir.export
					.fan2_pwm_export                       (GPIO1GPIO[5]),                       //                       fan2_pwm.export
					.fan1_pwm_export                       (GPIO1GPIO[4]),                       //                       fan1_pwm.export
					.body_pwm_export                       (GPIO1GPIO[3]),                       //                       body_pwm.export
					.picker_pwm_export                     (GPIO1GPIO[2]),                     //                     picker_pwm.export
					.r_pwm_export                          (GPIO1GPIO[1]),                          //                          r_pwm.export
					.l_pwm_export                          (GPIO1GPIO[0]),                          //                          l_pwm.export
					.l_motor_dir_export                    (GPIO1GPIO[6]),                     //                    l_motor_dir.export	
					//work or puase
					.start_pause_export                    (GPIO1GPIO[20]),                         //                    start_pause.export		


					

					//clk for MIPI_REFCLK

									
					//I2C for decode
					.i2c_mipi_sda_in                            (CAMERA_I2C_SDA),                            //                       i2c_mipi.sda_in
					.i2c_mipi_scl_in                            (CAMERA_I2C_SCL),                            //                               .scl_in
					.i2c_mipi_sda_oe                            (),                            //                               .sda_oe
					.i2c_mipi_scl_oe                            (),                            //                               .scl_oe
					
					//I2C for CMOS
					.i2c_camera_sda_in                          (MIPI_I2C_SDA),                          //                     i2c_camera.sda_in
					.i2c_camera_scl_in                          (MIPI_I2C_SCL),                          //                               .scl_in
					.i2c_camera_sda_oe                          (),                          //                               .sda_oe
					.i2c_camera_scl_oe                          (),                           //                               .scl_oe
					
					//FPGA Partion
					.alt_vip_itc_0_clocked_video_vid_clk        (disp_clk),        //    alt_vip_itc_0_clocked_video.vid_clk
					.alt_vip_itc_0_clocked_video_vid_data       (disp_data),       //                               .vid_data
					.alt_vip_itc_0_clocked_video_underflow      (),      //                               .underflow
					.alt_vip_itc_0_clocked_video_vid_datavalid  (),  //                               .vid_datavalid
					.alt_vip_itc_0_clocked_video_vid_v_sync     (disp_vs),     //                               .vid_v_sync
					.alt_vip_itc_0_clocked_video_vid_h_sync     (disp_hs),     //                               .vid_h_sync
					.alt_vip_itc_0_clocked_video_vid_f          (),          //                               .vid_f
					.alt_vip_itc_0_clocked_video_vid_h          (),          //                               .vid_h
					.alt_vip_itc_0_clocked_video_vid_v          (),          //                               .vid_v		
					
					//D8M camera
					.d8m_xclkin_clk                         	  (MIPI_REFCLK),                         //                 d8m_xclkin_clk.clk
					.terasic_camera_0_conduit_end_camera_d      ({MIPI_PIXEL_D_d[9:0], 2'b00}),      //   terasic_camera_0_conduit_end.camera_d
					.terasic_camera_0_conduit_end_camera_fval   (MIPI_PIXEL_VS_d),   //                               .camera_fval
					.terasic_camera_0_conduit_end_camera_lval   (MIPI_PIXEL_HS_d),   //                               .camera_lval
					.terasic_camera_0_conduit_end_camera_pixclk (~MIPI_PIXEL_CLK), //                               .camera_pixclk						
	

	  );

// Debounce logic to clean out glitches within 1ms
debounce debounce_inst(
             .clk(fpga_clk_50),
             .reset_n(hps_fpga_reset_n),
             .data_in(KEY),
             .data_out(fpga_debounced_buttons)
         );
defparam debounce_inst.WIDTH = 2;
defparam debounce_inst.POLARITY = "LOW";
defparam debounce_inst.TIMEOUT = 50000;               // at 50Mhz this is a debounce time of 1ms
defparam debounce_inst.TIMEOUT_WIDTH = 16;            // ceil(log2(TIMEOUT))

//Source/Probe megawizard instance;
hps_reset hps_reset_inst(
              .source_clk(fpga_clk_50),
              .source(hps_reset_req)
          );

altera_edge_detector pulse_cold_reset(
                         .clk(fpga_clk_50),
                         .rst_n(hps_fpga_reset_n),
                         .signal_in(hps_reset_req[0]),
                         .pulse_out(hps_cold_reset)
                     );
defparam pulse_cold_reset.PULSE_EXT = 6;
defparam pulse_cold_reset.EDGE_TYPE = 1;
defparam pulse_cold_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_warm_reset(
                         .clk(fpga_clk_50),
                         .rst_n(hps_fpga_reset_n),
                         .signal_in(hps_reset_req[1]),
                         .pulse_out(hps_warm_reset)
                     );
defparam pulse_warm_reset.PULSE_EXT = 2;
defparam pulse_warm_reset.EDGE_TYPE = 1;
defparam pulse_warm_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_debug_reset(
                         .clk(fpga_clk_50),
                         .rst_n(hps_fpga_reset_n),
                         .signal_in(hps_reset_req[2]),
                         .pulse_out(hps_debug_reset)
                     );
defparam pulse_debug_reset.PULSE_EXT = 32;
defparam pulse_debug_reset.EDGE_TYPE = 1;
defparam pulse_debug_reset.IGNORE_RST_WHILE_BUSY = 1;

reg [25: 0] counter;
reg led_level;
always @(posedge fpga_clk_50 or negedge hps_fpga_reset_n) begin
    if (~hps_fpga_reset_n) begin
        counter <= 0;
        led_level <= 0;
    end

    else if (counter == 24999999) begin
        counter <= 0;
        led_level <= ~led_level;
    end
    else
        counter <= counter + 1'b1;
end

assign LED[0] = led_level;


endmodule
