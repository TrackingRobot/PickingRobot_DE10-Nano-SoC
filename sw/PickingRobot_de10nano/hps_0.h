#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'uart_1', class 'altera_avalon_uart'
 * The macros are prefixed with 'UART_1_'.
 * The prefix is the slave descriptor.
 */
#define UART_1_COMPONENT_TYPE altera_avalon_uart
#define UART_1_COMPONENT_NAME uart_1
#define UART_1_BASE 0x0
#define UART_1_SPAN 32
#define UART_1_END 0x1f
#define UART_1_IRQ 4
#define UART_1_BAUD 115200
#define UART_1_DATA_BITS 8
#define UART_1_FIXED_BAUD 0
#define UART_1_FREQ 50000000
#define UART_1_PARITY 'N'
#define UART_1_SIM_CHAR_STREAM ""
#define UART_1_SIM_TRUE_BAUD 0
#define UART_1_STOP_BITS 1
#define UART_1_SYNC_REG_DEPTH 2
#define UART_1_USE_CTS_RTS 0
#define UART_1_USE_EOP_REGISTER 0

/*
 * Macros for device 'uart_0', class 'altera_avalon_uart'
 * The macros are prefixed with 'UART_0_'.
 * The prefix is the slave descriptor.
 */
#define UART_0_COMPONENT_TYPE altera_avalon_uart
#define UART_0_COMPONENT_NAME uart_0
#define UART_0_BASE 0x20
#define UART_0_SPAN 32
#define UART_0_END 0x3f
#define UART_0_IRQ 3
#define UART_0_BAUD 115200
#define UART_0_DATA_BITS 8
#define UART_0_FIXED_BAUD 0
#define UART_0_FREQ 50000000
#define UART_0_PARITY 'N'
#define UART_0_SIM_CHAR_STREAM ""
#define UART_0_SIM_TRUE_BAUD 0
#define UART_0_STOP_BITS 1
#define UART_0_SYNC_REG_DEPTH 2
#define UART_0_USE_CTS_RTS 0
#define UART_0_USE_EOP_REGISTER 0

/*
 * Macros for device 'TurnOnBody_Picker', class 'altera_avalon_pio'
 * The macros are prefixed with 'TURNONBODY_PICKER_'.
 * The prefix is the slave descriptor.
 */
#define TURNONBODY_PICKER_COMPONENT_TYPE altera_avalon_pio
#define TURNONBODY_PICKER_COMPONENT_NAME TurnOnBody_Picker
#define TURNONBODY_PICKER_BASE 0x40
#define TURNONBODY_PICKER_SPAN 16
#define TURNONBODY_PICKER_END 0x4f
#define TURNONBODY_PICKER_BIT_CLEARING_EDGE_REGISTER 0
#define TURNONBODY_PICKER_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TURNONBODY_PICKER_CAPTURE 0
#define TURNONBODY_PICKER_DATA_WIDTH 1
#define TURNONBODY_PICKER_DO_TEST_BENCH_WIRING 0
#define TURNONBODY_PICKER_DRIVEN_SIM_VALUE 0
#define TURNONBODY_PICKER_EDGE_TYPE NONE
#define TURNONBODY_PICKER_FREQ 50000000
#define TURNONBODY_PICKER_HAS_IN 0
#define TURNONBODY_PICKER_HAS_OUT 1
#define TURNONBODY_PICKER_HAS_TRI 0
#define TURNONBODY_PICKER_IRQ_TYPE NONE
#define TURNONBODY_PICKER_RESET_VALUE 0

/*
 * Macros for device 'TurnOnFanPwm', class 'altera_avalon_pio'
 * The macros are prefixed with 'TURNONFANPWM_'.
 * The prefix is the slave descriptor.
 */
#define TURNONFANPWM_COMPONENT_TYPE altera_avalon_pio
#define TURNONFANPWM_COMPONENT_NAME TurnOnFanPwm
#define TURNONFANPWM_BASE 0x50
#define TURNONFANPWM_SPAN 16
#define TURNONFANPWM_END 0x5f
#define TURNONFANPWM_BIT_CLEARING_EDGE_REGISTER 0
#define TURNONFANPWM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TURNONFANPWM_CAPTURE 0
#define TURNONFANPWM_DATA_WIDTH 1
#define TURNONFANPWM_DO_TEST_BENCH_WIRING 0
#define TURNONFANPWM_DRIVEN_SIM_VALUE 0
#define TURNONFANPWM_EDGE_TYPE NONE
#define TURNONFANPWM_FREQ 50000000
#define TURNONFANPWM_HAS_IN 0
#define TURNONFANPWM_HAS_OUT 1
#define TURNONFANPWM_HAS_TRI 0
#define TURNONFANPWM_IRQ_TYPE NONE
#define TURNONFANPWM_RESET_VALUE 0

/*
 * Macros for device 'TurnOnMotorPwm', class 'altera_avalon_pio'
 * The macros are prefixed with 'TURNONMOTORPWM_'.
 * The prefix is the slave descriptor.
 */
#define TURNONMOTORPWM_COMPONENT_TYPE altera_avalon_pio
#define TURNONMOTORPWM_COMPONENT_NAME TurnOnMotorPwm
#define TURNONMOTORPWM_BASE 0x60
#define TURNONMOTORPWM_SPAN 16
#define TURNONMOTORPWM_END 0x6f
#define TURNONMOTORPWM_BIT_CLEARING_EDGE_REGISTER 0
#define TURNONMOTORPWM_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TURNONMOTORPWM_CAPTURE 0
#define TURNONMOTORPWM_DATA_WIDTH 1
#define TURNONMOTORPWM_DO_TEST_BENCH_WIRING 0
#define TURNONMOTORPWM_DRIVEN_SIM_VALUE 0
#define TURNONMOTORPWM_EDGE_TYPE NONE
#define TURNONMOTORPWM_FREQ 50000000
#define TURNONMOTORPWM_HAS_IN 0
#define TURNONMOTORPWM_HAS_OUT 1
#define TURNONMOTORPWM_HAS_TRI 0
#define TURNONMOTORPWM_IRQ_TYPE NONE
#define TURNONMOTORPWM_RESET_VALUE 0

/*
 * Macros for device 'Start_Pause', class 'altera_avalon_pio'
 * The macros are prefixed with 'START_PAUSE_'.
 * The prefix is the slave descriptor.
 */
#define START_PAUSE_COMPONENT_TYPE altera_avalon_pio
#define START_PAUSE_COMPONENT_NAME Start_Pause
#define START_PAUSE_BASE 0x70
#define START_PAUSE_SPAN 16
#define START_PAUSE_END 0x7f
#define START_PAUSE_BIT_CLEARING_EDGE_REGISTER 0
#define START_PAUSE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define START_PAUSE_CAPTURE 0
#define START_PAUSE_DATA_WIDTH 1
#define START_PAUSE_DO_TEST_BENCH_WIRING 0
#define START_PAUSE_DRIVEN_SIM_VALUE 0
#define START_PAUSE_EDGE_TYPE NONE
#define START_PAUSE_FREQ 50000000
#define START_PAUSE_HAS_IN 1
#define START_PAUSE_HAS_OUT 0
#define START_PAUSE_HAS_TRI 0
#define START_PAUSE_IRQ_TYPE NONE
#define START_PAUSE_RESET_VALUE 0

/*
 * Macros for device 'Raise_S_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'RAISE_S_IN_'.
 * The prefix is the slave descriptor.
 */
#define RAISE_S_IN_COMPONENT_TYPE altera_avalon_pio
#define RAISE_S_IN_COMPONENT_NAME Raise_S_in
#define RAISE_S_IN_BASE 0x80
#define RAISE_S_IN_SPAN 16
#define RAISE_S_IN_END 0x8f
#define RAISE_S_IN_IRQ 7
#define RAISE_S_IN_BIT_CLEARING_EDGE_REGISTER 0
#define RAISE_S_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RAISE_S_IN_CAPTURE 0
#define RAISE_S_IN_DATA_WIDTH 1
#define RAISE_S_IN_DO_TEST_BENCH_WIRING 0
#define RAISE_S_IN_DRIVEN_SIM_VALUE 0
#define RAISE_S_IN_EDGE_TYPE NONE
#define RAISE_S_IN_FREQ 50000000
#define RAISE_S_IN_HAS_IN 1
#define RAISE_S_IN_HAS_OUT 0
#define RAISE_S_IN_HAS_TRI 0
#define RAISE_S_IN_IRQ_TYPE LEVEL
#define RAISE_S_IN_RESET_VALUE 0

/*
 * Macros for device 'Falling_S_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'FALLING_S_IN_'.
 * The prefix is the slave descriptor.
 */
#define FALLING_S_IN_COMPONENT_TYPE altera_avalon_pio
#define FALLING_S_IN_COMPONENT_NAME Falling_S_in
#define FALLING_S_IN_BASE 0x90
#define FALLING_S_IN_SPAN 16
#define FALLING_S_IN_END 0x9f
#define FALLING_S_IN_IRQ 6
#define FALLING_S_IN_BIT_CLEARING_EDGE_REGISTER 0
#define FALLING_S_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FALLING_S_IN_CAPTURE 1
#define FALLING_S_IN_DATA_WIDTH 1
#define FALLING_S_IN_DO_TEST_BENCH_WIRING 0
#define FALLING_S_IN_DRIVEN_SIM_VALUE 0
#define FALLING_S_IN_EDGE_TYPE ANY
#define FALLING_S_IN_FREQ 50000000
#define FALLING_S_IN_HAS_IN 1
#define FALLING_S_IN_HAS_OUT 0
#define FALLING_S_IN_HAS_TRI 0
#define FALLING_S_IN_IRQ_TYPE LEVEL
#define FALLING_S_IN_RESET_VALUE 0

/*
 * Macros for device 'Fan2_dir', class 'altera_avalon_pio'
 * The macros are prefixed with 'FAN2_DIR_'.
 * The prefix is the slave descriptor.
 */
#define FAN2_DIR_COMPONENT_TYPE altera_avalon_pio
#define FAN2_DIR_COMPONENT_NAME Fan2_dir
#define FAN2_DIR_BASE 0xa0
#define FAN2_DIR_SPAN 16
#define FAN2_DIR_END 0xaf
#define FAN2_DIR_BIT_CLEARING_EDGE_REGISTER 0
#define FAN2_DIR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FAN2_DIR_CAPTURE 0
#define FAN2_DIR_DATA_WIDTH 1
#define FAN2_DIR_DO_TEST_BENCH_WIRING 0
#define FAN2_DIR_DRIVEN_SIM_VALUE 0
#define FAN2_DIR_EDGE_TYPE NONE
#define FAN2_DIR_FREQ 50000000
#define FAN2_DIR_HAS_IN 0
#define FAN2_DIR_HAS_OUT 1
#define FAN2_DIR_HAS_TRI 0
#define FAN2_DIR_IRQ_TYPE NONE
#define FAN2_DIR_RESET_VALUE 0

/*
 * Macros for device 'Fan1_dir', class 'altera_avalon_pio'
 * The macros are prefixed with 'FAN1_DIR_'.
 * The prefix is the slave descriptor.
 */
#define FAN1_DIR_COMPONENT_TYPE altera_avalon_pio
#define FAN1_DIR_COMPONENT_NAME Fan1_dir
#define FAN1_DIR_BASE 0xb0
#define FAN1_DIR_SPAN 16
#define FAN1_DIR_END 0xbf
#define FAN1_DIR_BIT_CLEARING_EDGE_REGISTER 0
#define FAN1_DIR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define FAN1_DIR_CAPTURE 0
#define FAN1_DIR_DATA_WIDTH 1
#define FAN1_DIR_DO_TEST_BENCH_WIRING 0
#define FAN1_DIR_DRIVEN_SIM_VALUE 0
#define FAN1_DIR_EDGE_TYPE NONE
#define FAN1_DIR_FREQ 50000000
#define FAN1_DIR_HAS_IN 0
#define FAN1_DIR_HAS_OUT 1
#define FAN1_DIR_HAS_TRI 0
#define FAN1_DIR_IRQ_TYPE NONE
#define FAN1_DIR_RESET_VALUE 0

/*
 * Macros for device 'Body_dir', class 'altera_avalon_pio'
 * The macros are prefixed with 'BODY_DIR_'.
 * The prefix is the slave descriptor.
 */
#define BODY_DIR_COMPONENT_TYPE altera_avalon_pio
#define BODY_DIR_COMPONENT_NAME Body_dir
#define BODY_DIR_BASE 0xc0
#define BODY_DIR_SPAN 16
#define BODY_DIR_END 0xcf
#define BODY_DIR_BIT_CLEARING_EDGE_REGISTER 0
#define BODY_DIR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BODY_DIR_CAPTURE 0
#define BODY_DIR_DATA_WIDTH 1
#define BODY_DIR_DO_TEST_BENCH_WIRING 0
#define BODY_DIR_DRIVEN_SIM_VALUE 0
#define BODY_DIR_EDGE_TYPE NONE
#define BODY_DIR_FREQ 50000000
#define BODY_DIR_HAS_IN 0
#define BODY_DIR_HAS_OUT 1
#define BODY_DIR_HAS_TRI 0
#define BODY_DIR_IRQ_TYPE NONE
#define BODY_DIR_RESET_VALUE 0

/*
 * Macros for device 'Picker_dir', class 'altera_avalon_pio'
 * The macros are prefixed with 'PICKER_DIR_'.
 * The prefix is the slave descriptor.
 */
#define PICKER_DIR_COMPONENT_TYPE altera_avalon_pio
#define PICKER_DIR_COMPONENT_NAME Picker_dir
#define PICKER_DIR_BASE 0xd0
#define PICKER_DIR_SPAN 16
#define PICKER_DIR_END 0xdf
#define PICKER_DIR_BIT_CLEARING_EDGE_REGISTER 0
#define PICKER_DIR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PICKER_DIR_CAPTURE 0
#define PICKER_DIR_DATA_WIDTH 1
#define PICKER_DIR_DO_TEST_BENCH_WIRING 0
#define PICKER_DIR_DRIVEN_SIM_VALUE 0
#define PICKER_DIR_EDGE_TYPE NONE
#define PICKER_DIR_FREQ 50000000
#define PICKER_DIR_HAS_IN 0
#define PICKER_DIR_HAS_OUT 1
#define PICKER_DIR_HAS_TRI 0
#define PICKER_DIR_IRQ_TYPE NONE
#define PICKER_DIR_RESET_VALUE 0

/*
 * Macros for device 'R_motor_dir', class 'altera_avalon_pio'
 * The macros are prefixed with 'R_MOTOR_DIR_'.
 * The prefix is the slave descriptor.
 */
#define R_MOTOR_DIR_COMPONENT_TYPE altera_avalon_pio
#define R_MOTOR_DIR_COMPONENT_NAME R_motor_dir
#define R_MOTOR_DIR_BASE 0xe0
#define R_MOTOR_DIR_SPAN 16
#define R_MOTOR_DIR_END 0xef
#define R_MOTOR_DIR_BIT_CLEARING_EDGE_REGISTER 0
#define R_MOTOR_DIR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define R_MOTOR_DIR_CAPTURE 0
#define R_MOTOR_DIR_DATA_WIDTH 1
#define R_MOTOR_DIR_DO_TEST_BENCH_WIRING 0
#define R_MOTOR_DIR_DRIVEN_SIM_VALUE 0
#define R_MOTOR_DIR_EDGE_TYPE NONE
#define R_MOTOR_DIR_FREQ 50000000
#define R_MOTOR_DIR_HAS_IN 0
#define R_MOTOR_DIR_HAS_OUT 1
#define R_MOTOR_DIR_HAS_TRI 0
#define R_MOTOR_DIR_IRQ_TYPE NONE
#define R_MOTOR_DIR_RESET_VALUE 0

/*
 * Macros for device 'L_motor_dir', class 'altera_avalon_pio'
 * The macros are prefixed with 'L_MOTOR_DIR_'.
 * The prefix is the slave descriptor.
 */
#define L_MOTOR_DIR_COMPONENT_TYPE altera_avalon_pio
#define L_MOTOR_DIR_COMPONENT_NAME L_motor_dir
#define L_MOTOR_DIR_BASE 0xf0
#define L_MOTOR_DIR_SPAN 16
#define L_MOTOR_DIR_END 0xff
#define L_MOTOR_DIR_BIT_CLEARING_EDGE_REGISTER 0
#define L_MOTOR_DIR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define L_MOTOR_DIR_CAPTURE 0
#define L_MOTOR_DIR_DATA_WIDTH 1
#define L_MOTOR_DIR_DO_TEST_BENCH_WIRING 0
#define L_MOTOR_DIR_DRIVEN_SIM_VALUE 0
#define L_MOTOR_DIR_EDGE_TYPE NONE
#define L_MOTOR_DIR_FREQ 50000000
#define L_MOTOR_DIR_HAS_IN 0
#define L_MOTOR_DIR_HAS_OUT 1
#define L_MOTOR_DIR_HAS_TRI 0
#define L_MOTOR_DIR_IRQ_TYPE NONE
#define L_MOTOR_DIR_RESET_VALUE 0

/*
 * Macros for device 'Fan2_PWM', class 'my_pwm'
 * The macros are prefixed with 'FAN2_PWM_'.
 * The prefix is the slave descriptor.
 */
#define FAN2_PWM_COMPONENT_TYPE my_pwm
#define FAN2_PWM_COMPONENT_NAME Fan2_PWM
#define FAN2_PWM_BASE 0x100
#define FAN2_PWM_SPAN 16
#define FAN2_PWM_END 0x10f

/*
 * Macros for device 'Fan1_PWM', class 'my_pwm'
 * The macros are prefixed with 'FAN1_PWM_'.
 * The prefix is the slave descriptor.
 */
#define FAN1_PWM_COMPONENT_TYPE my_pwm
#define FAN1_PWM_COMPONENT_NAME Fan1_PWM
#define FAN1_PWM_BASE 0x110
#define FAN1_PWM_SPAN 16
#define FAN1_PWM_END 0x11f

/*
 * Macros for device 'Body_PWM', class 'my_pwm'
 * The macros are prefixed with 'BODY_PWM_'.
 * The prefix is the slave descriptor.
 */
#define BODY_PWM_COMPONENT_TYPE my_pwm
#define BODY_PWM_COMPONENT_NAME Body_PWM
#define BODY_PWM_BASE 0x120
#define BODY_PWM_SPAN 16
#define BODY_PWM_END 0x12f

/*
 * Macros for device 'Picker_PWM', class 'my_pwm'
 * The macros are prefixed with 'PICKER_PWM_'.
 * The prefix is the slave descriptor.
 */
#define PICKER_PWM_COMPONENT_TYPE my_pwm
#define PICKER_PWM_COMPONENT_NAME Picker_PWM
#define PICKER_PWM_BASE 0x130
#define PICKER_PWM_SPAN 16
#define PICKER_PWM_END 0x13f

/*
 * Macros for device 'R_PWM', class 'my_pwm'
 * The macros are prefixed with 'R_PWM_'.
 * The prefix is the slave descriptor.
 */
#define R_PWM_COMPONENT_TYPE my_pwm
#define R_PWM_COMPONENT_NAME R_PWM
#define R_PWM_BASE 0x140
#define R_PWM_SPAN 16
#define R_PWM_END 0x14f

/*
 * Macros for device 'L_PWM', class 'my_pwm'
 * The macros are prefixed with 'L_PWM_'.
 * The prefix is the slave descriptor.
 */
#define L_PWM_COMPONENT_TYPE my_pwm
#define L_PWM_COMPONENT_NAME L_PWM
#define L_PWM_BASE 0x150
#define L_PWM_SPAN 16
#define L_PWM_END 0x15f

/*
 * Macros for device 'uart_2', class 'altera_up_avalon_rs232'
 * The macros are prefixed with 'UART_2_'.
 * The prefix is the slave descriptor.
 */
#define UART_2_COMPONENT_TYPE altera_up_avalon_rs232
#define UART_2_COMPONENT_NAME uart_2
#define UART_2_BASE 0x160
#define UART_2_SPAN 8
#define UART_2_END 0x167
#define UART_2_IRQ 5

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x300f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x30000
#define ILC_SPAN 256
#define ILC_END 0x300ff


#endif /* _ALTERA_HPS_0_H_ */
